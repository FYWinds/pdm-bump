[project]
name = "pdm-bump"
version = "0.7.0.dev4"
readme = "README.md"
description = "A plugin for PDM providing the ability to modify the version according to PEP440"
authors = [
    { name = "Carsten Igel", email = "cig@bite-that-bit.de" },
]
dependencies = [
    "pdm>=2.00",
    "annotated-types>=0.2.0",
    "typing-extensions>=4; python_version<='3.9'",
    "tomlkit>=0.11.6",
    "tomli>=2.0.1; python_version<='3.10'",
    "pyproject-metadata>=0.6.1",
    "tomli-w>=1.0.0",
]
requires-python = ">=3.9"

[project.license]
text = "MIT"

[project.license-files]
paths = [
    "LICENSE",
]

[project.urls]
homepage = "https://github.com/carstencodes/pdm-bump"

[project.optional-dependencies]

[project.entry-points.pdm]
pdm-bump = "pdm_bump:main"

[build-system]
requires = [
    "pdm-pep517",
]
build-backend = "pdm.pep517.api"

[tool.black]
line-length = 79
target-version = [
    "py39",
]

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.1.2",
    "tox>=3.25.1",
    "tox-pdm>=0.6.0",
    "pytest-cov>=3.0.0",
]
checkstlye = [
    "flake8>=3.9.2",
    "flake518>=1.2.3",
    "mypy>=0.971",
    "pylint>=2.14.5",
    "pycodestyle>=2.7.0",
]
formatting = [
    "black>=22.6.0",
    "isort>=5.10.1",
    "licenseheaders>=0.8.8",
    "autoflake>=2.0.2",
]
release = [
    "gitlint>=0.17.0",
    "pip-audit>=2.4.4",
]
static-code-analysis = [
    "radon>=5.1.0",
    "vulture>=2.7",
    "bandit>=1.7.4",
    "prospector>=0.12.2",
]
checkstyle = [
    "pep8-naming>=0.13.3",
]

[tool.pdm.scripts]
flake = "flake518 src/"
mypy = "mypy src/"
pylint = "pylint src/"
isort = "isort src/"
black = "black src/"
autoflake = "autoflake --ignore-pass-statements --remove-all-unused-imports --in-place --recursive src"
radon_cc = "radon cc --total-average --show-complexity --json --output-file radon.cc.json src/"
radon_mi = "radon mi --show --json --output-file radon.mi.json src/"
radon_hal = "radon hal --functions --json --output-file radon.hal.json src/"
vulture = "vulture src/"
bandit = "bandit src/"
prospector = "prospector src/"
copyright-headers = "licenseheaders -y 2021-2023 -o 'Carsten Igel' -n pdm-bump -d . -u https://github.com/carstencodes/pdm-bump -x src/pdm_bump/dynamic.py -t ./.licenseheader.j2 -E .py"

[tool.pdm.scripts.check-style]
composite = [
    "flake",
    "pylint",
    "mypy",
]

[tool.pdm.scripts.format]
composite = [
    "copyright-headers",
    "isort",
    "black",
    "autoflake",
]

[tool.pdm.scripts.radon]
composite = [
    "radon_cc",
    "radon_mi",
    "radon_hal",
]

[tool.pdm.scripts.static-analysis]
composite = [
    "radon",
    "vulture",
    "bandit",
    "prospector",
]

[tool.pdm.scripts.check-commits]
shell = "gitlint --commits $(git describe --tags --abbrev=0)..HEAD lint"

[tool.pdm.plugins]

[tool.pylint.MAIN]
fail-under = 9
ignore = "vcs"

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "C0114",
    "C0115",
    "C0116",
]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
junit_suite_name = "pdm-bump"
pythonpath = [
    "src",
]
minversion = "7.0.0"
addopts = [
    "--cache-clear",
    "--junit-xml",
    "pytest.result.xml",
    "--cov=src",
    "--cov-branch",
    "--cov-report",
    "xml:pytest.coverage.xml",
    "--cov-report",
    "term",
]
filterwarnings = [
    "ignore::DeprecationWarning ",
]

[tool.tox]
legacy_tox_ini = "[tox]\nminversion = 3.25.0\nrequires = tox-pdm\nskip_missing_interpreters = false\nenvlist = py{39, 310, 311}\nisolated_build = true\nskipsdist = true\n\n\n[testenv]\nsetenv =\n    PDM_IGNORE_SAVED_PYTHON=\"1\"\nallowlist_externals =\n    mv\n    mkdir\n    pytest\n    pdm\n    python\ndeps = pdm\nrecreate = true\npassenv =\n    PYTHONPATH\ncommands =\n    pdm install --dev\n    pytest\ncommands_pre =\n    mkdir -p {toxinidir}/results/{envname}\ncommands_post =\n    mv {toxinidir}/pytest.result.xml {toxinidir}/pytest.coverage.xml {toxinidir}/results/{envname}/\n"

# configuration file for git-cliff (0.1.0)

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ##  Changelog for release {{ version | trim_start_matches(pat="v") }}
{% else %}\
    ## [unreleased]
{% endif %}\

   Released on {{ timestamp | date(format="%Y-%m-%d") }}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }} by {{ commit.author.name }} [{{ commit.id| truncate(length=7, end="")}}](https://github.com/carstencodes/pdm-bump/commit/{{ commit.id }})\
    {% endfor %}
{% endfor %}\n
{% if version %}\
{% if previous %}\
**Full changelog**: [{{ previous.version }}...{{ version }}](https://github.com/carstencodes/pdm-bump/compare/{{ previous.version }}...{{ version }})
{% endif %}\n
{% endif %}\
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^docs", group = "Documentation"},
    { message = "^perf", group = "Performance"},
    { message = "^refactor", group = "Refactored"},
    { message = "^style", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^qa", group = "Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^ci", group = "Integration Tasks" },
    { message = "^build", group = "Build recipes" },
    { message = "^chore", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
